---
# tasks file for ansible-vcd
- name: Create VM
  vca_vapp:
    state: present
    operation: noop

    host: "{{ vcd_url }}"
    org: "{{ org_name }}"
    vdc_name: "{{ vdc_name }}"
    username: "{{ vcd_username }}"
    password: "{{ vcd_pwd }}"
    api_version: '26.0'
    service_type: vcd

    catalog_name: "{{ vcd_catalog }}"
    template_name: "{{ vcd_os_template }}"

    vapp_name: "{{ vm_name }}"
    vm_name: "{{ vm_name }}"
    vm_cpus: "{{ vm_cpu }}"
    vm_memory: "{{ vm_mem }}"
    network_name: "{{ vm_net }}"

    verify_certs: "{{ check_ssl_certs }}"

  register: vapp

#- debug:
#        msg: "VM {{ inventory_hostname }} got IP {{vm_ip}}"

- name: PowerOn VM
  vca_vapp:
    state: present
    operation: poweron

    host: "{{ vcd_url }}"
    org: "{{ org_name }}"
    vdc_name: "{{ vdc_name }}"
    username: "{{ vcd_username }}"
    password: "{{ vcd_pwd }}"
    api_version: '26.0'
    service_type: vcd

    verify_certs: "{{ check_ssl_certs }}"

    vapp_name: "{{ vm_name }}"

- name: Waiting for VM to boot
  wait_for:
    port: 22
    host: "{{ vm_ip }}"
    search_regex: SSH
    timeout: "{{ check_connection_timeout }}"
    delay: "{{ check_connection_delay }}"
    sleep: "{{ check_connection_sleep }}"

- name: Retrieve VM infos
  vca_vapp:
    state: present
    operation: noop

    host: "{{ vcd_url }}"
    org: "{{ org_name }}"
    vdc_name: "{{ vdc_name }}"
    username: "{{ vcd_username }}"
    password: "{{ vcd_pwd }}"
    api_version: '26.0'
    service_type: vcd

    verify_certs: "{{ check_ssl_certs }}"

    vapp_name: "{{ vm_name }}"

- fail:
    msg: "Cannot retrieve vm_admin_password"
  when: vm_admin_password is undefined

- name: Ensure .ssh directory exists
  file:
    path: "{{ lookup('env','HOME') + '/.ssh' }}"
    state: directory
    mode: 0700

- name: Ensure SSH Key exists or create it
  user:
    name: "{{ lookup('env','USER') }}"
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: "{{ ssh_key_file }}"
    state: present

- name: get SSH public key
  shell: "ssh-keyscan {{ vm_ip }} | grep -v  '#.*' | grep rsa"
  register: keyscan
  changed_when: False

- name: Add/update the public key in the '{{ ssh_known_hosts_file }}'
  known_hosts:
    name: "{{ vm_ip }}"
    key: "{{ keyscan.stdout }}"
    path: "{{ lookup('env','HOME') + '/.ssh/known_hosts' }}"
  when:
    - not keyscan | skipped

- name: Trying to log into VM (using ssh key)
  local_action: shell ssh -q  -o BatchMode=yes {{ ansible_user }}@{{ vm_ip }} "echo success"
  ignore_errors: yes
  register: test_login
  changed_when: false

- name: "Upload SSH public key to {{ vm_ip }} for {{ ansible_user }}"
  local_action: "shell sshpass -p '{{ vm_admin_password }}' ssh-copy-id -i {{ ssh_key_file }} {{ ansible_user }}@{{ vm_ip }}"
  when: test_login | failed

- name: Trying to log into VM (using ssh key)
  local_action: shell ssh -q  -o BatchMode=yes {{ vm_ip }} "echo success"
  register: test_login2
  failed_when: "'FAILED' in test_login2.stderr"
  when: test_login | failed

- debug:
    msg: "Connection success"
  when: test_login2 | success


